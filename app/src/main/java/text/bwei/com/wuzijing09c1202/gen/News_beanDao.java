package text.bwei.com.wuzijing09c1202.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import text.bwei.com.wuzijing09c1202.one.view.News_bean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_BEAN".
*/
public class News_beanDao extends AbstractDao<News_bean, String> {

    public static final String TABLENAME = "NEWS_BEAN";

    /**
     * Properties of entity News_bean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Desc = new Property(0, String.class, "desc", true, "DESC");
    }


    public News_beanDao(DaoConfig config) {
        super(config);
    }
    
    public News_beanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_BEAN\" (" + //
                "\"DESC\" TEXT PRIMARY KEY NOT NULL );"); // 0: desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News_bean entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News_bean entity) {
        stmt.clearBindings();
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(1, desc);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public News_bean readEntity(Cursor cursor, int offset) {
        News_bean entity = new News_bean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0) // desc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News_bean entity, int offset) {
        entity.setDesc(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
     }
    
    @Override
    protected final String updateKeyAfterInsert(News_bean entity, long rowId) {
        return entity.getDesc();
    }
    
    @Override
    public String getKey(News_bean entity) {
        if(entity != null) {
            return entity.getDesc();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(News_bean entity) {
        return entity.getDesc() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
